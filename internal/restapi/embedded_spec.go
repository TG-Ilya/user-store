// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Service for store users.",
    "title": "Users store",
    "version": "1.0.0"
  },
  "host": "localhost:50877",
  "basePath": "/api/v1",
  "paths": {
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "list users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user"
              }
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "operationId": "addOne",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created user",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "users"
        ],
        "operationId": "getOne",
        "responses": {
          "200": {
            "description": "get user by id",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "404": {
            "description": "User not found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "operationId": "updateOne",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update user",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "404": {
            "description": "User not found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "operationId": "deleteOne",
        "responses": {
          "204": {
            "description": "Deleted user"
          },
          "404": {
            "description": "User not found"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "user": {
      "required": [
        "name",
        "birth_date"
      ],
      "properties": {
        "birth_date": {
          "description": "The user birth date",
          "type": "string",
          "pattern": "[0-9]{2}-[0-9]{2}-[0-9]{4}",
          "example": "12-05-1980"
        },
        "id": {
          "description": "The user ID.",
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "name": {
          "description": "The user name",
          "type": "string",
          "minLength": 3
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Service for store users.",
    "title": "Users store",
    "version": "1.0.0"
  },
  "host": "localhost:50877",
  "basePath": "/api/v1",
  "paths": {
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "list users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user"
              }
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "operationId": "addOne",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created user",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "users"
        ],
        "operationId": "getOne",
        "responses": {
          "200": {
            "description": "get user by id",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "404": {
            "description": "User not found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "operationId": "updateOne",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update user",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "404": {
            "description": "User not found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "operationId": "deleteOne",
        "responses": {
          "204": {
            "description": "Deleted user"
          },
          "404": {
            "description": "User not found"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "user": {
      "required": [
        "name",
        "birth_date"
      ],
      "properties": {
        "birth_date": {
          "description": "The user birth date",
          "type": "string",
          "pattern": "[0-9]{2}-[0-9]{2}-[0-9]{4}",
          "example": "12-05-1980"
        },
        "id": {
          "description": "The user ID.",
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "name": {
          "description": "The user name",
          "type": "string",
          "minLength": 3
        }
      }
    }
  }
}`))
}
